import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from utils.load_sql_query_utils import load_table
import plotly.express as px


FILE_NAME = "player_stats.sql"
st.set_page_config(
    page_title="Player Stats",
    layout="wide",
    initial_sidebar_state="auto"
)

st.title(":blue[Player Statistics] ⛹️")


# Load database credentials from secrets.toml
db_config = st.secrets["database"]

engine = create_engine(
    f"postgresql+psycopg2://{db_config['SOURCE_DB_USER']}:"
    f"{db_config['SOURCE_DB_PASSWORD']}@"
    f"{db_config['SOURCE_DB_HOST']}:"
    f"{db_config['SOURCE_DB_PORT']}/{db_config['SOURCE_DB_NAME']}"
)


player_stats_df = load_table(FILE_NAME, engine)

# Get all the players and all the years
all_years = range(2016, 2021)
all_players = player_stats_df["player_name"].unique()

# Build the full index
full_index = pd.MultiIndex.from_product(
    [all_players, all_years],
    names=["player_name", "year"]
)  # code generated by gen-AI

# Reindex
player_stats_df_full = player_stats_df.set_index(
    ["player_name", "year"]
).reindex(full_index).reset_index()

# Fill null stats with 0
count_stats = [
    "points_per_game",
    "assists_per_game",
    "rebounds_per_game",
    "total_three_pointers"
]
percentage_stats = [
    "field_goal_pct_per_game",
    "three_point_pct_per_game",
    "free_throws_pct_per_game"
]

player_stats_df_full[count_stats] = player_stats_df_full[count_stats].fillna(0)
player_stats_df_full[percentage_stats] = \
    player_stats_df_full[percentage_stats].fillna(0)

# Get the years
years = sorted(player_stats_df_full["year"].unique())

# Add a dropdown to select year
selected_year = st.selectbox(
    label="Select a Year:",
    options=years,
    help="Choose a year"
)

# Filter players based on selected year
players_for_year = player_stats_df_full.loc[
    player_stats_df_full["year"] == selected_year, "player_name"
].unique()

# Add a dropdown to select player

selected_player = st.selectbox(
    label="Select a Player:",
    options=sorted(players_for_year),
    help=("Choose a player"),
    index=823  # Default is Stephen Curry
)

st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

# Filter the final DataFrame
filtered_player_stats_df = player_stats_df_full[
    (player_stats_df_full["year"] == selected_year)
    & (player_stats_df_full["player_name"] == selected_player)
]

# Filter to get only the player
filtered_only_player = player_stats_df_full[
    player_stats_df_full["player_name"] == selected_player]

# Show player stats as metrics
column_1, column_2 = st.columns(2)
with column_1:
    st.metric(
        label=":blue[Points per Game (ppg)]",
        value=filtered_player_stats_df["points_per_game"],
        border=True,
        help="Average points per game in the year"
    )
    st.metric(
        label=":blue[Rebounds per Game (rpg)]",
        value=filtered_player_stats_df["rebounds_per_game"],
        border=True,
        help="Average rebounds per game in the year"
    )
    st.metric(
        label=":blue[Assists per Game (apg)]",
        value=filtered_player_stats_df["assists_per_game"],
        border=True,
        help="Average assists per game based in the year"
    )
with column_2:
    st.metric(
        label=":blue[Field Goals Percentage per Game (%)]",
        value=filtered_player_stats_df["field_goal_pct_per_game"],
        border=True,
        help="Field goals percentage per game in the year"
    )
    st.metric(
        label=":blue[Three Pointers Percentage per Game (%)]",
        value=filtered_player_stats_df["three_point_pct_per_game"],
        border=True,
        help="Three pointers percentage per game"
        " based on the season start year"
    )
    st.metric(
        label=":blue[Free Throws Percentage per Game (%)]",
        value=filtered_player_stats_df["free_throws_pct_per_game"],
        border=True,
        help="Free throws percentage per game in the year"
    )

st.markdown("<div style='margin-top: 50px;'></div>", unsafe_allow_html=True)
st.markdown("---")
st.markdown("<div style='margin-top: 50px;'></div>", unsafe_allow_html=True)


# Mapping of column names to display names
stat_options = {
    "points_per_game": "Points per Game (ppg)",
    "assists_per_game": "Assists per Game (apg)",
    "rebounds_per_game": "Rebounds per Game (rpg)"
}

# Multi-select to choose which stats to show
selected_stats = st.multiselect(
    label="Select Stats to Plot:",
    options=list(stat_options.values()),
    default=list(stat_options.values()),
    help="Choose which stats you want to plot"
)

# Convert back to column names for plotting
selected_stats_columns = [
    key for key, value in stat_options.items() if value in selected_stats
]

# Line graph to show how stats changed over the years
if selected_stats:
    line_chart = px.line(
        filtered_only_player,
        x="year",
        y=selected_stats_columns,
        markers=True,
        title=f"{selected_player}'s Performance Over The Years",
        labels={"year": "Year", "value": "Per Game Stats", "variable": "Stat"}
    )
    # Fix the x-axis to show exact year values without offset
    line_chart.update_xaxes(
        tickmode='array',
        tickvals=filtered_only_player['year'].unique(),
        ticktext=filtered_only_player['year'].unique()
    )
    line_chart.update_layout(title_font=dict(size=22, color="#60b4ff"))
    st.plotly_chart(line_chart, use_container_width=True)
else:
    st.error("Please select at least one stat to display.")

# Top three point shooters across all years
top_three_pointers_df = (
    player_stats_df
    .groupby("player_name", as_index=False)["total_three_pointers"]
    .sum()
    .sort_values(by="total_three_pointers", ascending=False)
)

# Take the first 10 players
top_three_pointers_df = top_three_pointers_df.head()

st.markdown("<div style='margin-top: 50px;'></div>", unsafe_allow_html=True)
st.markdown("---")
st.markdown("<div style='margin-top: 50px;'></div>", unsafe_allow_html=True)

# Plot the bar chart
bar_chart = px.bar(
    top_three_pointers_df,
    x="player_name",
    y="total_three_pointers",
    color="total_three_pointers",
    color_continuous_scale="Blues",
    title="Top 5 Players by Total Three-Pointers",
    labels={
        "player_name": "Player Name",
        "total_three_pointers": "Total 3-Pointers"
    }
)

# Update the title color and size
bar_chart.update_layout(title_font=dict(size=22, color='#60b4ff'))

st.plotly_chart(bar_chart, use_container_width=True)

# Most accurate free throw shooters
top_free_throws_df = (
    player_stats_df
    .groupby("player_name", as_index=False)["free_throws_pct_per_game"]
    .mean()
    .sort_values(by="free_throws_pct_per_game", ascending=False)
)

# Take the first 10
top_free_throws_df = top_free_throws_df.head()

# Plot the bar chart
bar_chart_2 = px.bar(
    top_free_throws_df,
    x="player_name",
    y="free_throws_pct_per_game",
    color="free_throws_pct_per_game",
    color_continuous_scale="Blues",
    title="Top 5 Players by Free Throw Accuracy",
    labels={
        "player_name": "Player Name",
        "free_throws_pct_per_game": "Free Throw Accuracy"
    }
)

# Update the title color and size
bar_chart_2.update_layout(title_font=dict(size=22, color='#60b4ff'))

st.plotly_chart(bar_chart_2, use_container_width=True)
