import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from utils.sql_utils import load_sql_query
import plotly.express as px

st.set_page_config(
    page_title="Player Stats",
    layout="wide",
    initial_sidebar_state="auto"
)

st.title(":blue[Player Statistics] ⛹️")


# Load database credentials from secrets.toml
db_config = st.secrets["database"]

engine = create_engine(
    f"postgresql+psycopg://{db_config['SOURCE_DB_USER']}:"
    f"{db_config['SOURCE_DB_PASSWORD']}@"
    f"{db_config['SOURCE_DB_HOST']}:"
    f"{db_config['SOURCE_DB_PORT']}/{db_config['SOURCE_DB_NAME']}"
)


# Cache the function so it doesn't rerun every time the streamlit app reloads
@st.cache_data
def load_player_stats():
    try:
        query = load_sql_query("player_stats.sql")
        return pd.read_sql(query, engine)
    except Exception as e:
        st.error(f"Error fetching data: {e}")


player_stats_df = load_player_stats()

# Get all the players and all the years
all_years = range(2016, 2021)
all_players = player_stats_df["player_name"].unique()

# Build the full index
full_index = pd.MultiIndex.from_product(
    [all_players, all_years],
    names=["player_name", "year"]
)  # code generated by gen-AI

# Reindex
player_stats_df_full = player_stats_df.set_index(
    ["player_name", "year"]
).reindex(full_index).reset_index()

# Fill numeric stats with 0 and percentages with NaN
count_stats = [
    "points_per_game",
    "assists_per_game",
    "rebounds_per_game",
    "total_three_pointers"
]
percentage_stats = [
    "field_goal_pct_per_game",
    "three_point_pct_per_game",
    "free_throws_pct_per_game"
]

player_stats_df_full[count_stats] = player_stats_df_full[count_stats].fillna(0)
player_stats_df_full[percentage_stats] = \
    player_stats_df_full[percentage_stats].astype("float")

# Get the years
years = sorted(player_stats_df_full["year"].unique())

# Add a dropdown to select year
selected_year = st.selectbox("Select a Year:", years)

# Filter players based on selected year
players_for_year = player_stats_df_full.loc[
    player_stats_df_full["year"] == selected_year, "player_name"
].unique()

# Add a dropdown to select player

selected_player = st.selectbox("Select a Player:", sorted(players_for_year))

st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

# Filter the final DataFrame
filtered_player_stats_df = player_stats_df_full[
    (player_stats_df_full["year"] == selected_year)
    & (player_stats_df_full["player_name"] == selected_player)
]

# Show player stats as metrics
column_1, column_2 = st.columns(2)
with column_1:
    st.metric(
        label=":blue[Points per Game (ppg)]",
        value=filtered_player_stats_df["points_per_game"],
        border=True,
        help="Average points per game in the year"
    )
    st.metric(
        label=":blue[Rebounds per Game (rpg)]",
        value=filtered_player_stats_df["rebounds_per_game"],
        border=True,
        help="Average rebounds per game in the year"
    )
    st.metric(
        label=":blue[Assists per Game (apg)]",
        value=filtered_player_stats_df["assists_per_game"],
        border=True,
        help="Average assists per game based in the year"
    )
with column_2:
    st.metric(
        label=":blue[Field Goals Percentage per Game (%)]",
        value=filtered_player_stats_df["field_goal_pct_per_game"],
        border=True,
        help="Field goals percentage per game in the year"
    )
    st.metric(
        label=":blue[Three Pointers Percentage per Game (%)]",
        value=filtered_player_stats_df["three_point_pct_per_game"],
        border=True,
        help="Three pointers percentage per game"
        " based on the season start year"
    )
    st.metric(
        label=":blue[Free Throws Percentage per Game (%)]",
        value=filtered_player_stats_df["free_throws_pct_per_game"],
        border=True,
        help="Free throws percentage per game in the year"
    )

st.markdown("<div style='margin-top: 100px;'></div>", unsafe_allow_html=True)

# Top three point shooters across all years
top_three_pointers_df = (
    player_stats_df
    .groupby("player_name", as_index=False)["total_three_pointers"]
    .sum()
    .sort_values(by="total_three_pointers", ascending=False)
)

# Take the first 10 players
top_three_pointers_df = top_three_pointers_df.head(10)


# Plot the bar chart
bar_chart = px.bar(
    top_three_pointers_df,
    x="player_name",
    y="total_three_pointers",
    color="total_three_pointers",
    color_continuous_scale="Blues",
    title="Top 10 Players by Total Three-Pointers",
    labels={
        "player_name": "Player",
        "total_three_pointers": "Total 3-Pointers"
    }
)

bar_chart.update_layout(title_font=dict(size=32, color='#60b4ff'))

st.plotly_chart(bar_chart, use_container_width=True)
